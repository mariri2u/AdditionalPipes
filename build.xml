<project name="AdditionalPipes" basedir="./BuildCraft" default="main">
	<property environment="env"/>
	<!-- Properties -->

	<property name="addon.src.dir" value="../"/>
	<property name="addon.resources.dir" value="${addon.src.dir}/resources"/>
	<property name="addon.name" value="additionalpipes"/>
	<property name="bc.version" value="4.0.2"/>
	<available file="${addon.src.dir}/.git" type="dir" property="addon.git.present"/>

	<import file="./BuildCraft/build.xml" as="BuildCraft"/>

	<!-- Targets -->

	<!-- Clear build directory -->
	<target name="clean" depends="BuildCraft.clean"/>

	<!-- Set full version -->
	<target name="initialize-version" depends="BuildCraft.initialize-version"/>

	<!-- Override BuildCraft.git.revision -->

	<target name="git.revision">
		<exec executable="git" dir="${addon.src.dir}" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
			<arg value="describe"/>
			<arg line="--match &quot;[^(jenkins)]*&quot;"/>
			<arg value="--tags"/>
		</exec>
		<loadresource property="git.clean.revision">
			<propertyresource name="git.revision"/>
			<filterchain>
				<tokenfilter>
					<filetokenizer/>
					<replaceregex pattern="-[a-z0-9]+$" replace=""/>
					<replacestring from="-" to="."/>
				</tokenfilter>
			</filterchain>
		</loadresource>

		<condition property="project.version" value="${git.clean.revision}" else="0.0.0">
			<and>
				<isset property="git.clean.revision"/>
				<length string="${git.clean.revision}" trim="yes" length="0" when="greater"/>
			</and>
		</condition>
		<condition property="project.complete.version" value="${git.revision}" else="0.0.0">
			<and>
				<isset property="git.revision"/>
				<length string="${git.revision}" trim="yes" length="0" when="greater"/>
			</and>
		</condition>
		<echo>Building ${addon.name} version ${project.complete.version} (${project.version})</echo>
	</target>

	<!-- Setup BC -->
	<target name="setup" depends="BuildCraft.setup,BuildCraft.copy-src">

		<!-- Recompile and update MD5 -->
		<exec dir="${mcp.dir}" executable="cmd" osfamily="windows">
			<arg line="/c updatemd5.bat --force"/>
		</exec>

		<exec dir="${mcp.dir}" executable="sh" osfamily="unix">
			<arg line="updatemd5.sh --force"/>
		</exec>

	</target>

	<target name="copy-src">
		<!-- Copy sources -->
		<copy todir="${mcpsrc.dir}/minecraft">
			<fileset dir="${addon.src.dir}/common"/>
			<filterset begintoken="%" endtoken="%">
				<filter token="VERSION" value="${project.complete.version}" />
				<filter token="BUILD_NUMBER" value="${build.number}" />
				<filter token="BC_VERSION" value="${bc.version}" />
			</filterset>
		</copy>
	</target>

	<target name="compile" depends="initialize-version,setup,copy-src">

		<mkdir dir="${classes.dir}"/>
		<delete includeemptydirs="true">
			<fileset dir="${classes.dir}" includes="**/*"/>
		</delete>

		<!-- Recompile -->
		<exec dir="${mcp.dir}" executable="cmd" osfamily="windows">
			<arg line="/c recompile.bat"/>
		</exec>

		<exec dir="${mcp.dir}" executable="sh" osfamily="unix">
			<arg value="recompile.sh"/>
		</exec>
		
		<!-- Check for failure -->
		<fail message="MCP failed to build">
			<condition>
				<resourcecontains resource="${mcp.dir}/logs/client_compile.log" substring="error:"/>
			</condition>
		</fail>
		
		<!-- Reobfuscate -->
		<exec dir="${mcp.dir}" executable="cmd" osfamily="windows">
			<arg line="/c reobfuscate_srg.bat"/>
		</exec>

		<exec dir="${mcp.dir}" executable="sh" osfamily="unix">
			<arg value="reobfuscate_srg.sh"/>
		</exec>

		<!-- Copy classes -->
		<copy todir="${classes.dir}">
			<fileset dir="${mcp.dir}/reobf/minecraft"/>
		</copy>

		<!-- Copy resources -->
		<copy todir="${classes.dir}">
			<fileset dir="${addon.resources.dir}"/>
		</copy>

		<!-- Reset src dir to post-forge-install state -->
		<delete dir="${mcpsrc.dir}/minecraft/buildcraft"/>
		<delete dir="${mcpsrc.dir}/minecraft/additionalpipes"/>
		<delete dir="${mcpsrc.dir}/minecraft/ic2"/>
		<delete dir="${mcpsrc.dir}/minecraft/logisticspipes"/>
		<delete dir="${mcpsrc.dir}/minecraft/net/kyprus"/>

	</target>

	<!-- Package the compiled files -->
	<target name="package" depends="compile">

		<delete dir="${jar.dir}"/>
		<mkdir dir="${jar.dir}"/>
		<condition property="jar.file.name" value="${jar.dir}/${addon.name}-${mc.version}-${project.version.full}.jar" else="${jar.dir}/${addon.name}-universal-${mc.version}-${project.version.full}.jar">
			<isset property="forge-long-name"/>
		</condition>
		
		<jar destfile="${jar.file.name}" basedir="${classes.dir}"/>

	</target>

	<!-- Default target to run -->
	<target name="main" depends="package"/>

</project>
